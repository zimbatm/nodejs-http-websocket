From 94f13bc6df4791c2ab61f7f2e0f8cf945c3a78dc Mon Sep 17 00:00:00 2001
From: Jonas Pfenniger <jonas@pfenniger.name>
Date: Mon, 8 Feb 2010 23:25:57 +0100
Subject: [PATCH 2/2] HTTPConnection now has a hijack() method.

This is used by the WebSocket server implementation to change the rules
of HTTP connection. Virtually taking over the connection by hijack()ing
it. Yarrrrrrr !
---
 src/node_http.cc |   17 +++++++++++++++--
 src/node_http.h  |    8 ++++++++
 2 files changed, 23 insertions(+), 2 deletions(-)

diff --git a/src/node_http.cc b/src/node_http.cc
index 9794b90..6933c23 100644
--- a/src/node_http.cc
+++ b/src/node_http.cc
@@ -57,6 +57,7 @@ HTTPConnection::Initialize (Handle<Object> target)
   client_constructor_template->InstanceTemplate()->SetInternalFieldCount(1);
   client_constructor_template->SetClassName(String::NewSymbol("Client"));
   NODE_SET_PROTOTYPE_METHOD(client_constructor_template, "resetParser", ResetParser);
+  NODE_SET_PROTOTYPE_METHOD(client_constructor_template, "hijack", Hijack);
   target->Set(String::NewSymbol("Client"), client_constructor_template->GetFunction());
 
   t = FunctionTemplate::New(NewServer);
@@ -64,10 +65,9 @@ HTTPConnection::Initialize (Handle<Object> target)
   server_constructor_template->Inherit(Connection::constructor_template);
   server_constructor_template->InstanceTemplate()->SetInternalFieldCount(1);
   NODE_SET_PROTOTYPE_METHOD(server_constructor_template, "resetParser", ResetParser);
+  NODE_SET_PROTOTYPE_METHOD(server_constructor_template, "hijack", Hijack);
   server_constructor_template->SetClassName(String::NewSymbol("ServerSideConnection"));
 
-  eof_symbol = NODE_PSYMBOL("eof");
-
 }
 
 Handle<Value>
@@ -100,6 +100,13 @@ Handle<Value> HTTPConnection::ResetParser(const Arguments& args) {
   return Undefined();
 }
 
+Handle<Value> HTTPConnection::Hijack(const Arguments& args) {
+  HandleScope scope;
+  HTTPConnection *connection = ObjectWrap::Unwrap<HTTPConnection>(args.Holder());
+  connection->Hijack();
+  return Undefined();
+}
+
 
 void
 HTTPConnection::OnReceive (const void *buf, size_t len)
@@ -109,6 +116,11 @@ HTTPConnection::OnReceive (const void *buf, size_t len)
   assert(refs_);
   size_t nparsed;
 
+  if (hijacked) {
+    Connection::OnReceive(buf, len);
+    return;
+  }
+
   nparsed = http_parser_execute(&parser_, static_cast<const char*>(buf), len);
 
   if (nparsed != len) {
@@ -164,6 +176,7 @@ HTTPConnection::on_message_begin (http_parser *parser)
     proppatch_sym = NODE_PSYMBOL("PROPPATCH");
     unlock_sym = NODE_PSYMBOL("UNLOCK");
     unknown_method_sym = NODE_PSYMBOL("UNKNOWN_METHOD");
+    eof_symbol = NODE_PSYMBOL("eof");
   }
 
   HTTPConnection *connection = static_cast<HTTPConnection*> (parser->data);
diff --git a/src/node_http.h b/src/node_http.h
index ad368b3..60ebd71 100644
--- a/src/node_http.h
+++ b/src/node_http.h
@@ -18,11 +18,15 @@ protected:
   static v8::Handle<v8::Value> NewClient (const v8::Arguments& args);
   static v8::Handle<v8::Value> NewServer (const v8::Arguments& args);
   static v8::Handle<v8::Value> ResetParser(const v8::Arguments& args);
+  static v8::Handle<v8::Value> Hijack(const v8::Arguments& args);
+
+  bool hijacked;
 
   HTTPConnection (enum http_parser_type t)
     : Connection()
   {
     type_ = t;
+    hijacked = false;
     ResetParser();
   }
 
@@ -40,6 +44,10 @@ protected:
     parser_.on_message_complete = on_message_complete;
     parser_.data = this;
   }
+  
+  void Hijack() {
+    hijacked = true;
+  }
 
   void OnReceive (const void *buf, size_t len);
   void OnEOF ();
-- 
1.6.6.1

